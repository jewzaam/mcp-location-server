"""
Data models for the MCP Location Server.
Generated By: Cursor (Claude Sonnet 4)
"""

from __future__ import annotations

from pydantic import BaseModel, ConfigDict, Field


class GeocodeResult(BaseModel):
    """A single geocoding result."""

    display_name: str = Field(
        description="Human-readable name of the location",
    )
    latitude: float = Field(
        description="Latitude coordinate in decimal degrees",
    )
    longitude: float = Field(
        description="Longitude coordinate in decimal degrees",
    )
    importance: float | None = Field(
        default=None,
        description="Importance score of the result (0.0-1.0)",
    )
    place_type: str | None = Field(
        default=None,
        alias="type",
        description="Type of place (e.g., 'house', 'city', 'country')",
    )
    place_class: str | None = Field(
        default=None,
        alias="class",
        description="Class of place (e.g., 'place', 'amenity', 'highway')",
    )
    osm_id: int | None = Field(
        default=None,
        description="OpenStreetMap ID of the object",
    )
    osm_type: str | None = Field(
        default=None,
        description="OpenStreetMap type (node, way, relation)",
    )

    model_config = ConfigDict(populate_by_name=True)


class GeocodeResponse(BaseModel):
    """Response containing geocoding results."""

    results: list[GeocodeResult] = Field(
        description="List of geocoding results",
    )
    query: str = Field(
        description="Original query that was geocoded",
    )
    count: int = Field(
        description="Number of results returned",
    )


class GeocodeRequest(BaseModel):
    """Request for geocoding an address or location."""

    query: str = Field(
        description="Address or location name to geocode",
        min_length=1,
        max_length=500,
    )
    limit: int = Field(
        default=1,
        description="Maximum number of results to return",
        ge=1,
        le=10,
    )

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "query": "1600 Pennsylvania Avenue, Washington DC",
                    "limit": 1,
                },
                {
                    "query": "Eiffel Tower",
                    "limit": 3,
                },
                {
                    "query": "Tokyo, Japan",
                },
            ],
        },
    )


class ElevationData(BaseModel):
    """Elevation data in multiple units."""

    meters: float = Field(
        description="Elevation in meters above sea level",
    )
    feet: float = Field(
        description="Elevation in feet above sea level",
    )
    dataset: str | None = Field(
        default=None,
        description="Name of the elevation dataset used",
    )


class ElevationResult(BaseModel):
    """A single elevation query result."""

    latitude: float = Field(
        description="Latitude coordinate in decimal degrees",
    )
    longitude: float = Field(
        description="Longitude coordinate in decimal degrees",
    )
    elevation: ElevationData = Field(
        description="Elevation data in multiple units",
    )


class ElevationResponse(BaseModel):
    """Response containing elevation results."""

    results: list[ElevationResult] = Field(
        description="List of elevation results",
    )
    count: int = Field(
        description="Number of results returned",
    )


class ElevationRequest(BaseModel):
    """Request for elevation data at coordinates."""

    latitude: float = Field(
        description="Latitude in decimal degrees",
        ge=-90.0,
        le=90.0,
    )
    longitude: float = Field(
        description="Longitude in decimal degrees",
        ge=-180.0,
        le=180.0,
    )
    dataset: str = Field(
        default="srtm90m",
        description="Elevation dataset to use",
        pattern="^[a-z0-9]+$",
    )

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "latitude": 35.6893514,
                    "longitude": -78.7767045,
                    "dataset": "srtm90m",
                },
                {
                    "latitude": 40.7128,
                    "longitude": -74.0060,
                    "dataset": "ned10m",
                },
            ],
        },
    )

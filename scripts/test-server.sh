#!/bin/bash
# Test script for MCP Location Server
# Generated By: Cursor (Claude Sonnet 4)

set -e

echo "üß™ Testing MCP Location Server"
echo "================================"

# Check if we're in the right directory
if [[ ! -f "pyproject.toml" ]] || [[ ! -d "src/mcp_location_server" ]]; then
    echo "‚ùå Error: Not in mcp-location-server directory"
    echo "Please run this script from the mcp-location-server root directory"
    echo "Usage: ./scripts/test-server.sh"
    exit 1
fi

# Check if the package is installed
echo "üîß Checking installation..."
python -c "
try:
    import mcp_location_server
    print('‚úÖ Package is installed')
except ImportError:
    print('‚ùå Package not installed')
    print('Run: pip install -e .')
    exit(1)
"

# Test the server can start
echo "üöÄ Testing server imports..."
python -c "
try:
    from mcp_location_server.server import main
    print('‚úÖ Server imports successfully')
except ImportError as e:
    print(f'‚ùå Import error: {e}')
    exit(1)
except Exception as e:
    print(f'‚ö†Ô∏è  Warning: {e}')
"

# Test STDIO mode (what Cursor uses)
echo "üì° Testing STDIO mode (Cursor compatibility)..."
python -c "
import subprocess
import json
import sys

# Test STDIO mode with proper MCP initialization
proc = subprocess.Popen([
    sys.executable, '-m', 'mcp_location_server.server'
], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

# Send initialization request
init_request = {
    'jsonrpc': '2.0',
    'id': 1,
    'method': 'initialize',
    'params': {
        'protocolVersion': '2024-11-05',
        'capabilities': {},
        'clientInfo': {'name': 'test-client', 'version': '1.0.0'}
    }
}

try:
    stdout, stderr = proc.communicate(json.dumps(init_request) + '\n', timeout=5)
    if proc.returncode == 0 and 'serverInfo' in stdout:
        print('‚úÖ STDIO mode works correctly')
    else:
        print(f'‚ùå STDIO mode failed: {stdout}')
        if stderr:
            print(f'   stderr: {stderr}')
        exit(1)
except subprocess.TimeoutExpired:
    proc.kill()
    print('‚ùå STDIO mode timed out')
    exit(1)
except Exception as e:
    print(f'‚ùå STDIO mode error: {e}')
    exit(1)
"

# Test the geocoding functionality directly
echo "üåç Testing direct geocoding..."
python -c "
import asyncio
from mcp_location_server.geocoding import NominatimGeocodingService
from mcp_location_server.models import GeocodeRequest

async def test_geocode():
    try:
        async with NominatimGeocodingService() as service:
            request = GeocodeRequest(query='Eiffel Tower', limit=1)
            response = await service.geocode(request)
            if response.count > 0:
                result = response.results[0]
                print(f'‚úÖ Geocoding test successful!')
                print(f'   Location: {result.display_name}')
                print(f'   Coordinates: {result.latitude}, {result.longitude}')
            else:
                print('‚ùå No results found for test query')
                return False
    except Exception as e:
        print(f'‚ùå Geocoding test failed: {e}')
        return False
    return True

async def test_reverse_geocode():
    try:
        async with NominatimGeocodingService() as service:
            result = await service.reverse_geocode(48.8584, 2.2945)  # Eiffel Tower coords
            if result:
                print(f'‚úÖ Reverse geocoding test successful!')
                print(f'   Address: {result.display_name}')
            else:
                print('‚ùå No reverse geocoding result found')
                return False
    except Exception as e:
        print(f'‚ùå Reverse geocoding test failed: {e}')
        return False
    return True

async def run_tests():
    success = True
    success &= await test_geocode()
    success &= await test_reverse_geocode()
    return success

if not asyncio.run(run_tests()):
    exit(1)
"

# Test using the test client
echo "üîß Testing with test client..."
if [[ -f "test_client.py" ]]; then
    python test_client.py
else
    echo "‚ö†Ô∏è  test_client.py not found, skipping client test"
fi

echo ""
echo "‚úÖ All tests passed!"
echo ""
echo "üìã Configuration for Cursor:"
echo "=============================="
echo ""
echo "Add this to your ~/.cursor/mcp.json file:"
echo ""
echo '{'
echo '  "mcpServers": {'
echo '    "location": {'
echo "      \"command\": \"$(which python)\","
echo '      "args": ["-m", "mcp_location_server.server"],'
echo "      \"cwd\": \"$(pwd)\""
echo '    }'
echo '  }'
echo '}'
echo ""
echo ""
echo "üìñ Next Steps:"
echo "1. Copy the JSON configuration above to ~/.cursor/mcp.json"
echo "2. Update the paths to absolute paths in the configuration"
echo "3. Restart Cursor IDE completely"
echo "4. Go to Settings ‚Üí MCP and enable the 'location' server"
echo "5. Test in Agent mode with: 'Find coordinates for Tokyo, Japan'"
echo ""
echo "üîç For troubleshooting, see the README.md file" 
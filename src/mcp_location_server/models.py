"""
Data models for the MCP Location Server.
Generated By: Cursor (Claude Sonnet 4)
"""

from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class GeocodeResult(BaseModel):
    """A single geocoding result."""
    
    display_name: str = Field(
        description="Human-readable name of the location"
    )
    latitude: float = Field(
        description="Latitude coordinate in decimal degrees"
    )
    longitude: float = Field(
        description="Longitude coordinate in decimal degrees"
    )
    importance: Optional[float] = Field(
        default=None,
        description="Importance score of the result (0.0-1.0)"
    )
    place_type: Optional[str] = Field(
        default=None,
        alias="type",
        description="Type of place (e.g., 'house', 'city', 'country')"
    )
    place_class: Optional[str] = Field(
        default=None,
        alias="class",
        description="Class of place (e.g., 'place', 'amenity', 'highway')"
    )
    osm_id: Optional[int] = Field(
        default=None,
        description="OpenStreetMap ID of the object"
    )
    osm_type: Optional[str] = Field(
        default=None,
        description="OpenStreetMap type (node, way, relation)"
    )
    
    model_config = ConfigDict(populate_by_name=True)


class GeocodeResponse(BaseModel):
    """Response containing geocoding results."""
    
    results: List[GeocodeResult] = Field(
        description="List of geocoding results"
    )
    query: str = Field(
        description="Original query that was geocoded"
    )
    count: int = Field(
        description="Number of results returned"
    )


class GeocodeRequest(BaseModel):
    """Request for geocoding an address or location."""
    
    query: str = Field(
        description="Address or location name to geocode",
        min_length=1,
        max_length=500
    )
    limit: int = Field(
        default=1,
        description="Maximum number of results to return",
        ge=1,
        le=10
    )
    
    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "query": "1600 Pennsylvania Avenue, Washington DC",
                    "limit": 1
                },
                {
                    "query": "Eiffel Tower",
                    "limit": 3
                },
                {
                    "query": "Tokyo, Japan"
                }
            ]
        }
    ) 
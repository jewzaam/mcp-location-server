#!/usr/bin/env python3
"""
Simple test client for the MCP Location Server.
Run this script to test the server manually.
Generated By: Cursor (Claude Sonnet 4)
"""

import asyncio
import json
import httpx


async def test_geocoding_tools():
    """Test the geocoding tools via HTTP."""
    base_url = "http://localhost:8000"
    
    # Test data
    test_cases = [
        {
            "name": "White House",
            "query": "1600 Pennsylvania Avenue, Washington DC",
            "limit": 1
        },
        {
            "name": "Eiffel Tower",
            "query": "Eiffel Tower",
            "limit": 2
        },
        {
            "name": "Tokyo",
            "query": "Tokyo, Japan",
            "limit": 1
        },
        {
            "name": "Invalid location",
            "query": "XYZ123NonexistentPlace456",
            "limit": 1
        }
    ]
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        print("üåç Testing MCP Location Server")
        print("=" * 50)
        
        # Test server status
        try:
            response = await client.get(f"{base_url}/health")
            print(f"‚úÖ Server is running (status: {response.status_code})")
        except Exception as e:
            print(f"‚ùå Server is not responding: {e}")
            return
        
        print()
        
        # Test geocoding for each case
        for i, test_case in enumerate(test_cases, 1):
            print(f"Test {i}: {test_case['name']}")
            print(f"Query: '{test_case['query']}'")
            
            try:
                # Prepare the tool call request
                # Note: This is a simplified test - real MCP clients would use the JSON-RPC protocol
                tool_request = {
                    "jsonrpc": "2.0",
                    "id": f"test_{i}",
                    "method": "tools/call",
                    "params": {
                        "name": "geocode",
                        "arguments": {
                            "query": test_case["query"],
                            "limit": test_case["limit"]
                        }
                    }
                }
                
                # Note: This is a simplified test approach
                # For a real test, we'd need to implement the full MCP protocol
                print(f"üìç Would call geocode tool with: {test_case['query']}")
                print(f"   Expected results: {test_case['limit']}")
                
            except Exception as e:
                print(f"‚ùå Error: {e}")
            
            print("-" * 30)
            print()
        
        # Test reverse geocoding
        print("Test: Reverse Geocoding")
        print("Coordinates: 40.7128, -74.0060 (New York City)")
        
        try:
            # Similar simplified test for reverse geocoding
            print("üìç Would call reverse_geocode tool with: lat=40.7128, lon=-74.0060")
            print("   Expected: Address in New York City")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        print("-" * 30)
        print()
        
        print("‚úÖ Manual test completed!")
        print()
        print("üí° To run the actual server:")
        print("   cd mcp-location-server")
        print("   python -m mcp_location_server.server")
        print()
        print("üîó Then test with an MCP client or:")
        print("   npx @modelcontextprotocol/inspector")


async def test_direct_geocoding():
    """Test the geocoding service directly (without MCP layer)."""
    print("\nüß™ Testing direct geocoding service...")
    
    try:
        from mcp_location_server.geocoding import NominatimGeocodingService
        from mcp_location_server.models import GeocodeRequest
        
        async with NominatimGeocodingService() as service:
            # Test geocoding
            request = GeocodeRequest(query="Eiffel Tower", limit=1)
            response = await service.geocode(request)
            
            print(f"Query: {response.query}")
            print(f"Results found: {response.count}")
            
            if response.results:
                result = response.results[0]
                print(f"Location: {result.display_name}")
                print(f"Coordinates: {result.latitude}, {result.longitude}")
                print(f"Type: {result.place_type}")
                print(f"Importance: {result.importance}")
            
            print("‚úÖ Direct geocoding test successful!")
            
    except ImportError:
        print("‚ùå Cannot import geocoding service - run from project directory")
    except Exception as e:
        print(f"‚ùå Error in direct test: {e}")


if __name__ == "__main__":
    print("MCP Location Server Test Client")
    print("================================")
    
    # Run tests
    asyncio.run(test_geocoding_tools())
    asyncio.run(test_direct_geocoding()) 